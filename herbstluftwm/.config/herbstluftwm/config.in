#!/bin/bash

hc() {
    cmds="$cmds ^ $@"
}

hc emit_hook reload

# remove all existing input binds
hc keyunbind --all
hc mouseunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
#Mod=Mod1    # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier

# media keys
hc keybind XF86MonBrightnessDown    spawn light -U 5
hc keybind XF86MonBrightnessUp      spawn light -A 5
hc keybind XF86AudioMute            spawn pulsemixer --toggle-mute
hc keybind XF86AudioLowerVolume     spawn pulsemixer --change-volume -2
hc keybind XF86AudioRaiseVolume     spawn pulsemixer --change-volume +2

# spotify
hc keybind XF86AudioPlay spawn playerctl play-pause
hc keybind XF86AudioPrev spawn playerctl previous
hc keybind XF86AudioNext spawn playerctl next

# session
hc keybind $Mod-Shift-q       quit
hc keybind $Mod-Shift-r       reload
hc keybind $Mod-q             close
hc keybind Control-space      spawn $HOME/.config/rofi/prompt.sh
hc keybind Control-Return     spawn urxvt
hc keybind Control-Alt-l      spawn locker
hc keybind Control-Alt-Return spawn $HOME/.config/rofi/session.sh

# basic movement
# focusing clients
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u       split   bottom  0.5
hc keybind $Mod-o       split   right   0.5
hc keybind $Mod-Shift-u split   top     0.5
hc keybind $Mod-Shift-o split   left    0.5
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames
resizestep=0.01
hc keybind $Mod-Control-h       resize left  +$resizestep
hc keybind $Mod-Control-j       resize down  +$resizestep
hc keybind $Mod-Control-k       resize up    +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep

resizestep=$(echo "$resizestep * 4" | bc)
hc keybind $Mod-Control-Shift-h resize left  +$resizestep
hc keybind $Mod-Control-Shift-j resize down  +$resizestep
hc keybind $Mod-Control-Shift-k resize up    +$resizestep
hc keybind $Mod-Control-Shift-l resize right +$resizestep

# tags
tag_names=( {1..8} )
tag_keys=( {1..8} 0 )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# layout control
hc keybind $Mod-r remove
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 max vertical horizontal grid             \
               , cycle_layout +1

hc keybind $Mod-Shift-space                                                     \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout -1 max vertical horizontal grid             \
               , cycle_layout -1
# mouse
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-BackSpace           cycle_monitor +1
hc keybind $Mod-Shift-BackSpace     cycle_montior -1
hc keybind $Mod-Tab                 cycle +1
hc keybind $Mod-Shift-Tab           cycle -1
hc keybind $Mod-Control-Tab         cycle_frame +1
hc keybind $Mod-Shift-Control-Tab   cycle_frame -1
hc keybind $Mod-i                   jumpto urgent

# theme
hc attr theme.reset 1
hc set frame_border_width 0
hc set always_show_frame 0
hc set frame_bg_transparent 1
hc set frame_transparent_width 0
hc set frame_gap 0

hc attr theme.inner_width 0
hc attr theme.floating.outer_width 0

# borders don't currently work quite right with the rounded corners :(
#hc attr theme.border_width ${xrdb:style.frame_width}
#hc attr theme.floating.border_width ${xrdb:style.frame_width}
hc attr theme.border_width 0
hc attr theme.floating.border_width 0

padding=20

hc set window_gap $padding
hc set window_radius 5
hc set frame_padding 0
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0
hc set swap_monitors_to_get_tag 0

# rules
hc unrule -F
hc rule focus=on # normally focus new clients
hc rule ewmhnotify=off # don't notify clients that they've been fullscreened
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

hc detect_monitors
hc set_layout max

hc attr theme.normal.color "${xrdb:color8}"
hc attr theme.active.color "${xrdb:color4}"
hc attr theme.urgent.color "${xrdb:color1}"
hc attr theme.floating.normal.color "${xrdb:color8}"
hc attr theme.floating.active.color "${xrdb:color4}"

# polybar height
bar_border=$(grep "^border-size" $HOME/.config/polybar/config | awk '{print $3}')
bar_height=$((( $(grep "^height" $HOME/.config/polybar/config | awk '{print $3}') + $bar_border * 2 )))

hc pad 0 $(($bar_height+$padding)) $padding $padding $padding
hc keybind $Mod-b spawn herbstluft_focus

herbstclient chain $cmds
