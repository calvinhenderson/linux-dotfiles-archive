#!/bin/sh

print_usage() {
  cat <<_EOF
USAGE:
  color-wallpaper [-f filename] [-s WxH]

DESCRIPTION:
  Creates a blurred image based on the active color palette (X server database)

OPTIONS:
  -f file         sets the output image name/location
  -s size         sets the output image resolution
_EOF
}

# prints usage and exits if the first parameter is an empty string
quit_empty() {
  if [ -z "$1" ]; then
    printf 'error: %s\n\n' "$2"
    print_usage; exit 1
  fi
}

set_wallpaper() {
  feh --no-fehbg --bg-fill "$file" && exit 0
}

# returns the matching color from the list
color() {
  echo "$colors" | awk '/*.?color'"$1"':/{print $2}'
}

voronoi_point() {
  echo "$pos" | xargs -n2 | sed -n "$1"p | awk '{print "$1,$2}'
}

case "$1" in
  "-f" | "--file")
    quit_empty "$2" "expected file name"
    file="$2"
    shift; shift
  ;;

  "-s" | "--size")
    quit_empty "$2" "expected image size"
    size="$2"
    shift; shift
  ;;

  *)
    printf 'unrecognized option: %s\n' "$1"
    print_usage; exit 1
  ;;
esac

# defaults
if [ -z "$size" ]; then
  size="1920x1080"
fi

if [ -z "$file" ]; then
  file="$(date +%F-%H%M%S_$size).png"
fi

# check if the file exists already
if [ -r "$file" ]; then
  printf 'image already exists. setting.\n'
  set_wallpaper
fi


# calculate circle positions
pos=$(bc <<_EOF
  width=$(echo "$size" | cut -f1 -dx)
  height=$(echo "$size" | cut -f2 -dx)
  scale=4; width * 0.30; height * 0.30; # top left
  width * 0.75; height * 0.30; # top right
  width * 0.10; height * 0.70; # bottom left
  width * 0.50; height * 0.90; # bottom middle
  width * 0.80; height * 0.70; # bottom right
_EOF
)

# acquire the active palette
colors="$(xrdb -query | grep color)"

convert \
  -size 100x100 xc:  -colorspace RGB \
    -sparse-color  Voronoi \
    "$(voronoi_point 1) $(color 1) $(voronoi_point 2) $(color 3) $(voronoi_point 3) $(color 6) $(voronoi_point 4) $(color 4) $(voronoi_point 5) $(color 2)" \
    -resize "${size}" \
  "$file" && set_wallpaper
